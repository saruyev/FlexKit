using System;
using Autofac;
using AutoFixture.Xunit2;
using FlexKit.Configuration.Core;
using FlexKit.Configuration.Sources;
using FlexKit.Configuration.Tests.TestBase;
using FluentAssertions;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration.Memory;
using NSubstitute;
using Xunit;

namespace FlexKit.Configuration.Tests.Core;

/// <summary>
/// Enhanced unit tests for FlexConfigurationBuilder using Autofac and AutoFixture.
/// </summary>
public class FlexConfigurationBuilderTests : UnitTestBase
{
    protected override void ConfigureContainer(ContainerBuilder builder)
    {
        builder.Register(_ => new FlexConfigurationBuilder()).AsSelf();
    }

    [Fact]
    public void AddJsonFile_WithGeneratedFilename_AddsJsonSource()
    {
        // Arrange
        var builder = Resolve<FlexConfigurationBuilder>();
        var filename = Create<string>().Replace("\\", "/").Replace("\0", "") + ".json";

        // Act
        var result = builder.AddJsonFile(filename);

        // Assert
        result.Should().BeSameAs(builder);
    }

    [Theory]
    [AutoData]
    public void AddJsonFile_WithAutoGeneratedParameters_AddsJsonSource(bool optional, bool reloadOnChange)
    {
        // Arrange
        var builder = Resolve<FlexConfigurationBuilder>();
        var filename = Create<string>().Replace("\\", "/").Replace("\0", "") + ".json";

        // Act
        var result = builder.AddJsonFile(filename, optional, reloadOnChange);

        // Assert
        result.Should().BeSameAs(builder);
    }

    [Fact]
    public void AddDotEnvFile_WithBogusGeneratedPath_AddsDotEnvSource()
    {
        // Arrange
        var builder = Resolve<FlexConfigurationBuilder>();
        var envPath = Create<string>().Replace("\\", "/").Replace("\0", "") + ".env";

        // Act
        var result = builder.AddDotEnvFile(envPath, optional: true);

        // Assert
        result.Should().BeSameAs(builder);
    }

    [Fact]
    public void Build_WithMemorySource_CreatesFlexConfig()
    {
        // Arrange
        var builder = Resolve<FlexConfigurationBuilder>();
        var testData = ConfigurationTestDataBuilder.CreateConfigurationDictionary();
        
        builder.AddSource(new MemoryConfigurationSource
        {
            InitialData = testData
        });

        // Act
        var flexConfig = builder.Build();

        // Assert
        flexConfig.Should().NotBeNull();
        flexConfig.Should().BeOfType<FlexConfiguration>();

        // Verify some test data is accessible
        dynamic config = flexConfig;
        var appName = config.Application?.Name?.ToString();
        appName.Should().NotBeNullOrEmpty();
    }

    [Fact]
    public void Build_CalledTwice_ThrowsInvalidOperationException()
    {
        // Arrange
        var builder = Resolve<FlexConfigurationBuilder>();
        builder.AddSource(new MemoryConfigurationSource());
        
        builder.Build(); // First call

        // Act & Assert
        var action = () => builder.Build(); // Second call
        action.Should().Throw<InvalidOperationException>()
            .WithMessage("*already been built*");
    }

    [Theory]
    [AutoData]
    public void ChainedOperations_WithMultipleSources_MaintainsFluentInterface(
        string jsonFile, string envFile, bool optional)
    {
        // Arrange
        var builder = Resolve<FlexConfigurationBuilder>();
        var testData = ConfigurationTestDataBuilder.CreateConfigurationDictionary();

        // Act
        var result = builder
            .AddJsonFile(jsonFile + ".json", optional)
            .AddDotEnvFile(envFile + ".env", optional)
            .AddEnvironmentVariables()
            .AddSource(new MemoryConfigurationSource { InitialData = testData });

        // Assert
        result.Should().BeSameAs(builder);
        
        // Verify the builder can still build
        var flexConfig = result.Build();
        flexConfig.Should().NotBeNull();
    }
}
