<!-- Directory.Build.targets - Place this in the solution root directory -->
<!-- This file automatically applies to ALL projects in the solution -->
<Project>
    <Import Project="$([MSBuild]::GetPathOfFileAbove('Directory.Build.targets', '$(MSBuildThisFileDirectory)../'))" />

    <!-- Validate file naming conventions -->
    <Target Name="ValidateFlexKitFileNaming" BeforeTargets="Build">
        <ItemGroup>
            <!-- Check for files that don't follow PascalCase naming -->
            <InvalidNamedFiles Include="**/*.cs" Exclude="bin/**;obj/**" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(Filename)', '^[a-z]'))" />
        </ItemGroup>

        <Error Text="FlexKit Style Guide Violation: File '%(InvalidNamedFiles.Filename)%(InvalidNamedFiles.Extension)' should use PascalCase naming convention."
               Condition="'@(InvalidNamedFiles)' != ''" />
    </Target>

    <!-- Validate project structure follows feature-based organization -->
    <Target Name="ValidateFlexKitStructure" BeforeTargets="Build">
        <ItemGroup>
            <!-- Warn about potential type-based organization -->
            <TypeBasedFolders Include="**/Contracts/**/*.cs;**/Utilities/**/*.cs;**/Helpers/**/*.cs;**/Common/**/*.cs" Exclude="bin/**;obj/**" />
        </ItemGroup>

        <Warning Text="FlexKit Style Guide: Consider feature-based organization instead of type-based folders (Contracts, Utilities, Helpers, Common). File: %(TypeBasedFolders.Identity)"
                 Condition="'@(TypeBasedFolders)' != ''" />
    </Target>

    <!-- Check for large files that might violate size guidelines -->
    <Target Name="ValidateFlexKitFileSize" BeforeTargets="Build">
        <ItemGroup>
            <CSharpFiles Include="**/*.cs" Exclude="bin/**;obj/**;*.Designer.cs;*.g.cs;*.g.i.cs" />
        </ItemGroup>

        <!-- This is a simplified check - in practice, you'd need a custom task to count actual lines -->
        <Message Text="FlexKit Style Guide: Monitor file sizes to ensure they don't exceed 500 lines. Large files detected in: %(CSharpFiles.Identity)"
                 Importance="normal"
                 Condition="$([System.IO.File]::ReadAllText('%(CSharpFiles.FullPath)').Length) > 25000" />
    </Target>

    <!-- Generate build summary with FlexKit compliance -->
    <Target Name="FlexKitBuildSummary" AfterTargets="Build">
        <Message Text="ðŸŽ‰ FlexKit Build Summary:" Importance="high" />
        <Message Text="  âœ… Style Guide: Enforced" Importance="high" />
        <Message Text="  âœ… Analyzers: Enabled" Importance="high" />
        <Message Text="  âœ… Modern C#: Required" Importance="high" />
        <Message Text="  âœ… Null Safety: Enabled" Importance="high" />
    </Target>

    <!-- Custom task to validate method complexity (optional enhancement) -->
    <UsingTask TaskName="ValidateMethodComplexity" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <SourceFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Linq" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
    foreach (var file in SourceFiles)
    {
        var content = File.ReadAllText(file.ItemSpec);
        var lines = content.Split('\n');
        var inMethod = false;
        var methodLines = 0;
        var methodName = "";
        var braceDepth = 0;
        var startLine = 0;

        for (int i = 0; i < lines.Length; i++)
        {
            var line = lines[i].Trim();

            // Skip empty lines, comments, and using statements
            if (string.IsNullOrWhiteSpace(line) || line.StartsWith("//") || line.StartsWith("/*") || line.StartsWith("using "))
                continue;

            // Detect method/property start - improved regex
            if (!inMethod && (line.Contains("public ") || line.Contains("private ") || line.Contains("protected ") || line.Contains("internal ")))
            {
                // Skip class, interface, enum, struct declarations
                if (line.Contains("class ") || line.Contains("interface ") || line.Contains("enum ") || line.Contains("struct "))
                    continue;

                // Check for method signature (has parentheses) or property
                var isMethod = line.Contains("(") && line.Contains(")") && !line.Contains("=>");
                var isProperty = line.Contains("{") || line.Contains("=>");

                if (isMethod || isProperty)
                {
                    // Extract method/property name more carefully
                    var nameMatch = Regex.Match(line, @"(?:public|private|protected|internal)\s+(?:static\s+)?(?:virtual\s+)?(?:override\s+)?(?:async\s+)?[\w\?\<\>\[\]]+\s+(\w+)");
                    if (nameMatch.Success)
                    {
                        methodName = nameMatch.Groups[1].Value;
                    }
                    else
                    {
                        // Fallback for complex cases like indexers
                        var parts = line.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                        methodName = parts.Length > 2 ? parts[2] : "Unknown";
                        if (methodName.Contains("("))
                            methodName = methodName.Split('(')[0];
                    }

                    // Handle expression-bodied members (single line)
                    if (line.Contains("=>"))
                    {
                        // Expression-bodied member - count as 1 line, don't track further
                        continue;
                    }

                    inMethod = true;
                    methodLines = 1;
                    startLine = i + 1;
                    braceDepth = 0;

                    // Count opening braces on the same line
                    braceDepth += line.Count(c => c == '{');
                    braceDepth -= line.Count(c => c == '}');
                }
            }
            else if (inMethod)
            {
                methodLines++;

                // Track brace depth
                braceDepth += line.Count(c => c == '{');
                braceDepth -= line.Count(c => c == '}');

                // Method ends when we return to brace depth 0
                if (braceDepth <= 0)
                {
                    if (methodLines > 25) // 20-line limit with some tolerance
                    {
                        var fileName = Path.GetFileName(file.ItemSpec);
                        Log.LogWarning($"FlexKit Style Guide: Method '{methodName}' in {fileName} may exceed 20-line guideline ({methodLines} lines, starting at line {startLine})");
                    }
                    inMethod = false;
                }
            }
        }
    }
    ]]>
            </Code>
        </Task>
    </UsingTask>

    <!-- Run method complexity validation -->
    <Target Name="ValidateMethodComplexity" BeforeTargets="Build">
        <ItemGroup>
            <CSharpFilesToCheck Include="**/*.cs" Exclude="bin/**;obj/**;*.Designer.cs;*.g.cs;*.g.i.cs" />
        </ItemGroup>

        <ValidateMethodComplexity SourceFiles="@(CSharpFilesToCheck)" ContinueOnError="true" />
    </Target>

</Project>
